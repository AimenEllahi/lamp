/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 LampNew.glb --transform
*/

import React, { useRef, useState } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { useControls } from "leva";
import * as THREE from "three";

const glowingWhiteMaterial = new THREE.ShaderMaterial({
  uniforms: {
    glowColor: { type: "c", value: new THREE.Color(0xffffff) },
  },
  vertexShader: `   
  varying vec3 vNormal;
      varying vec2 vertexUV;
      void main()
      {
        vertexUV = uv;
          vNormal = normalize( normalMatrix * normal );
          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
      }`,
  fragmentShader: ` 
  varying vec3 vNormal;
      uniform sampler2D globTexture;
      varying vec2 vertexUV;
      uniform vec3 glowColor;
      void main()
      {
      	float intensity = pow( 1.9 - dot( vNormal, vec3( 0, 0.0, 1.0) ), 1.0);
        vec3 atmosphereColor = glowColor * intensity;
        gl_FragColor = vec4(atmosphereColor,1.0)  ;
      }`,
  side: THREE.FrontSide,
});

export function LampNew(props) {
  const { nodes, materials } = useGLTF("/Models/LampNew-transformed.glb");
  const texture = useTexture("/tv.jpg");

  const [video] = useState(() => {
    const vid = document.createElement("video");
    vid.src = "/tv.mp4";
    vid.crossOrigin = "Anonymous";
    vid.loop = true;
    vid.muted = true;
    vid.play();
    return vid;
  });
  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
  texture.repeat.set(1, 1);

  const [lightOn, setLightOn] = useState(false);
  const ref = useRef();
  const { position, rotation, scale } = useControls("Lamp", {
    position: {
      value: [0, 20.7, 0],

      step: 0.1,
    }, //{"position":}
    rotation: {
      value: [0, 0, 0],
      step: 0.01,
    },
    scale: { value: [9.82, 5.7], step: 0.01 },
  });

  return (
    <group
      position={[0, -3, -3.6]}
      rotation={[0.28, 0, 0]}
      scale={[0.3, 0.3, 0.3]}
      {...props}
      dispose={null}
    >
      <pointLight
        distance={10}
        decay={3}
        power={30}
        castShadow
        receiveShadow
        position={[-0.3, 16.4, 7.4]}
        opacity={1}
      />
      <pointLight
        distance={1}
        position={[-0.29999999999999116, 21, 7.399999999999997]}
        rotation={rotation}
      />

      <group ref={ref} rotation={rotation}>
        <mesh
          receiveShadow
          geometry={nodes.Cube4.geometry}
          material={nodes.Cube4.material}
          position={[2.225, 15.496, 11.583]}
          scale={[2, 1, 1]}
        />
        <mesh geometry={nodes.Cube.geometry} material={nodes.Cube.material} />
        <mesh
          castShadow={lightOn}
          geometry={nodes.Cylinder1_0.geometry}
          material={materials["bracket.1"]}
          position={[1.876, 22.636, -1.876]}
          rotation={[0, -Math.PI / 4, 0]}
        />
        <mesh
          castShadow={lightOn}
          geometry={nodes.Cylinder1.geometry}
          material={materials.bracket}
          position={[1.876, 23.954, -1.876]}
          rotation={[0, -Math.PI / 4, 0]}
        />
        <mesh
          castShadow={lightOn}
          geometry={nodes.Main.geometry}
          material={materials["white in"]}
          position={[0, 21, 0]}
          rotation={[0, -Math.PI / 2, 0]}
        />
        <mesh
          castShadow={lightOn}
          geometry={nodes.BooleMain.geometry}
          material={glowingWhiteMaterial}
          position={[0, 20.85, 0]}
          scale={[1, 0.5, 1]}
        />

        <mesh
          castShadow={lightOn}
          geometry={nodes.Tube1.geometry}
          material={materials.main}
          position={[0, 21, 0]}
        />

        <mesh
          castShadow={lightOn}
          geometry={nodes.TVin.geometry}
          position={[0, 20.77, 0]}
          material={materials.screen}
          material-map={texture}
          // position={[0, 10.77, 0]}
          rotation={[0, Math.PI / 2, 0]}
        ></mesh>
        <mesh position={position} rotation-x={-Math.PI / 2}>
          <planeGeometry args={scale} />
          {/* <meshStandardMaterial
            map={texture}
            map-repeat={[1, 1]}
            map-wrapS={THREE.RepeatWrapping}
            map-wrapT={THREE.RepeatWrapping}
            map-anisotropy={16}
            color={0xffffff}
            side={THREE.DoubleSide}
          /> */}
          <meshStandardMaterial side={THREE.DoubleSide}>
            <videoTexture attach='map' args={[video]} />
          </meshStandardMaterial>
        </mesh>

        <mesh
          geometry={nodes.objArmchai.geometry}
          material={materials.chair}
          position={[2.561, 10.318, 3.866]}
          rotation={[-0.089, -1.571, 0]}
          scale={20}
        />
        <mesh
          geometry={nodes.objArmcha0.geometry}
          material={materials.chair}
          position={[-11.084, 4.275, 101.154]}
          rotation={[0, -Math.PI / 2, 0]}
          scale={20}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/LampNew-transformed.glb");
